{"version":3,"file":"static/js/946.5ea4fd0a.chunk.js","mappings":"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","sources":["components/MoviesList.styled.js","components/MoviesList.jsx","pages/Home.styled.js","pages/Home.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const List = styled.ul`\n  margin-top: 30px;\n  grid-template-columns: repeat(auto-fill, 300px);\n  grid-auto-rows: 520px;\n  display: grid;\n  list-style-type: none;\n  grid-column-gap: 30px;\n  grid-row-gap: 20px;\n  width: 100%;\n  justify-content: center;\n`;\n\nexport const Link = styled(NavLink)`\n  text-decoration: none;\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  justify-content: center;\n`;\n\nexport const ImageWrapper = styled.div`\n  overflow: hidden;\n  border-radius: 10px;\n  width: 300px;\n  height: 450px;\n  background: #707793;\n`;\n\nexport const TextContainer = styled.div`\n  padding: 10px 5px;\n  > p {\n    font-size: 18px;\n    color: #b0b4c3;\n    text-transform: uppercase;\n    font-weight: 500;\n  }\n`;\n","import {\n  List,\n  ListItem,\n  TextContainer,\n  Link,\n  ImageWrapper,\n} from './MoviesList.styled';\n\nexport const MoviesList = ({ movies, from }) => {\n  return (\n    <List>\n      {movies.map(({ title, id, poster }) => (\n        <ListItem key={id}>\n          <Link to={'/movies/' + id.toString()} state={{ from: from }}>\n            <ImageWrapper>\n              <img src={poster} alt={title} />\n            </ImageWrapper>\n            <TextContainer>\n              <p>{title}</p>\n            </TextContainer>\n          </Link>\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Title = styled.h1`\n  color: #b0b4c3;\n  font-size: 48px;\n`;\n","import { getTrending } from '../services/api';\nimport { useState, useEffect } from 'react';\nimport { MoviesList } from 'components/MoviesList';\nimport { Title } from './Home.styled';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        setMovies(await getTrending());\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    fetch();\n  }, []);\n\n  return (\n    <>\n      <Title>Trending today</Title>\n      <MoviesList movies={movies} from=\"/\" />\n    </>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst api_key = 'a319e917b3467e05f7f58bcf403053f1';\n\nconst fetch = async (path, params = {}) => {\n  params.api_key = api_key;\n  params.language = 'en-US';\n  const responce = await axios.get(path, { params: params });\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  }\n  return responce.data;\n};\n\nexport const getTrending = async () => {\n  try {\n    const responce = await fetch('trending/movie/day');\n    const movies = responce.results.map(movie => {\n      return {\n        title: movie.title,\n        id: movie.id,\n        poster:\n          'https://image.tmdb.org/t/p/w300_and_h450_bestv2/' +\n          movie.poster_path,\n      };\n    });\n    return movies;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getMovieDetails = async movieid => {\n  try {\n    const responce = await fetch(`movie/${movieid}`);\n    const movieDetails = {\n      poster:\n        'https://image.tmdb.org/t/p/w600_and_h900_bestv2/' +\n        responce.poster_path,\n      title: responce.title,\n      userScore: Math.round(responce.vote_average * 10),\n      overview: responce.overview,\n      genres: responce.genres.map(genre => genre.name),\n    };\n    return movieDetails;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getMovieCast = async movieid => {\n  try {\n    const responce = await fetch(`movie/${movieid}/credits`);\n    const cast = responce.cast.map(credit => {\n      return {\n        id: credit.id,\n        character: credit.character,\n        name: credit.name,\n        profile: credit.profile_path\n          ? `https://image.tmdb.org/t/p/w138_and_h175_face/${credit.profile_path}`\n          : 'https://www.themoviedb.org/assets/2/v4/glyphicons/basic/glyphicons-basic-4-user-grey-d8fe957375e70239d6abdd549fd7568c89281b2179b5f4470e2e12895792dfa5.svg',\n      };\n    });\n    return cast;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getMovieReviews = async movieid => {\n  try {\n    const responce = await fetch(`movie/${movieid}/reviews`, { page: 1 });\n    const reviews = responce.results.map(review => {\n      return {\n        author: review.author,\n        content: review.content,\n        id: review.id,\n      };\n    });\n    return reviews;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const searchMovies = async query => {\n  try {\n    const responce = await fetch('search/movie', {\n      page: 1,\n      include_adult: false,\n      query: query,\n    });\n    const movies = responce.results.map(movie => {\n      return {\n        title: movie.title,\n        id: movie.id,\n        poster:\n          'https://image.tmdb.org/t/p/w300_and_h450_bestv2/' +\n          movie.poster_path,\n      };\n    });\n    return movies;\n  } catch (error) {\n    throw error;\n  }\n};\n"],"names":["List","styled","Link","NavLink","ListItem","ImageWrapper","TextContainer","MoviesList","movies","from","map","title","id","poster","to","toString","state","src","alt","Title","useState","setMovies","useEffect","fetch","getTrending","console","log","message","axios","api_key","path","params","language","responce","status","Error","data","results","movie","poster_path","getMovieDetails","movieid","movieDetails","userScore","Math","round","vote_average","overview","genres","genre","name","getMovieCast","cast","credit","character","profile","profile_path","getMovieReviews","page","reviews","review","author","content","searchMovies","query","include_adult"],"sourceRoot":""}