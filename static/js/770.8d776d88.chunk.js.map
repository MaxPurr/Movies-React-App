{"version":3,"file":"static/js/770.8d776d88.chunk.js","mappings":"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","sources":["components/Cast.styled.js","components/Cast.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  margin-top: 40px;\n  grid-template-columns: repeat(auto-fill, 100px);\n  display: grid;\n  list-style-type: none;\n  grid-column-gap: 30px;\n  grid-row-gap: 25px;\n  width: calc(100vw - 300px);\n  justify-content: center;\n`;\n\nexport const ListItem = styled.li``;\n\nexport const ImageWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  overflow: hidden;\n  border-radius: 4px;\n  width: 100px;\n  height: 120px;\n  background: #707793;\n`;\n\nexport const TextContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: 10px 2px;\n`;\n\nexport const Name = styled.p`\n  color: #b0b4c3;\n`;\n\nexport const Character = styled.p`\n  color: #707793;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getMovieCast } from '../services/api';\nimport {\n  List,\n  ListItem,\n  ImageWrapper,\n  TextContainer,\n  Name,\n  Character,\n} from './Cast.styled';\n\nconst Cast = () => {\n  const { movieid } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const cast = await getMovieCast(movieid);\n        setCast(cast);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    fetch();\n  }, [movieid]);\n\n  return (\n    <List>\n      {cast.map(({ id, character, name, profile }) => (\n        <ListItem key={id}>\n          <ImageWrapper>\n            <img width={100} src={profile} alt={name} />\n          </ImageWrapper>\n          <TextContainer>\n            <Name>{name}</Name>\n            <Character>{character}</Character>\n          </TextContainer>\n        </ListItem>\n      ))}\n    </List>\n  );\n};\nexport default Cast;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst api_key = 'a319e917b3467e05f7f58bcf403053f1';\n\nconst fetch = async (path, params = {}) => {\n  params.api_key = api_key;\n  params.language = 'en-US';\n  const responce = await axios.get(path, { params: params });\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  }\n  return responce.data;\n};\n\nexport const getTrending = async () => {\n  try {\n    const responce = await fetch('trending/movie/day');\n    const movies = responce.results.map(movie => {\n      return {\n        title: movie.title,\n        id: movie.id,\n        poster:\n          'https://image.tmdb.org/t/p/w300_and_h450_bestv2/' +\n          movie.poster_path,\n      };\n    });\n    return movies;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getMovieDetails = async movieid => {\n  try {\n    const responce = await fetch(`movie/${movieid}`);\n    const movieDetails = {\n      poster:\n        'https://image.tmdb.org/t/p/w600_and_h900_bestv2/' +\n        responce.poster_path,\n      title: responce.title,\n      userScore: Math.round(responce.vote_average * 10),\n      overview: responce.overview,\n      genres: responce.genres.map(genre => genre.name),\n    };\n    return movieDetails;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getMovieCast = async movieid => {\n  try {\n    const responce = await fetch(`movie/${movieid}/credits`);\n    const cast = responce.cast.map(credit => {\n      return {\n        id: credit.id,\n        character: credit.character,\n        name: credit.name,\n        profile: credit.profile_path\n          ? `https://image.tmdb.org/t/p/w138_and_h175_face/${credit.profile_path}`\n          : 'https://www.themoviedb.org/assets/2/v4/glyphicons/basic/glyphicons-basic-4-user-grey-d8fe957375e70239d6abdd549fd7568c89281b2179b5f4470e2e12895792dfa5.svg',\n      };\n    });\n    return cast;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getMovieReviews = async movieid => {\n  try {\n    const responce = await fetch(`movie/${movieid}/reviews`, { page: 1 });\n    const reviews = responce.results.map(review => {\n      return {\n        author: review.author,\n        content: review.content,\n        id: review.id,\n      };\n    });\n    return reviews;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const searchMovies = async query => {\n  try {\n    const responce = await fetch('search/movie', {\n      page: 1,\n      include_adult: false,\n      query: query,\n    });\n    const movies = responce.results.map(movie => {\n      return {\n        title: movie.title,\n        id: movie.id,\n        poster:\n          'https://image.tmdb.org/t/p/w300_and_h450_bestv2/' +\n          movie.poster_path,\n      };\n    });\n    return movies;\n  } catch (error) {\n    throw error;\n  }\n};\n"],"names":["List","styled","ListItem","ImageWrapper","TextContainer","Name","Character","movieid","useParams","useState","cast","setCast","useEffect","fetch","getMovieCast","console","log","message","map","id","character","name","profile","width","src","alt","axios","api_key","path","params","language","responce","status","Error","data","getTrending","movies","results","movie","title","poster","poster_path","getMovieDetails","movieDetails","userScore","Math","round","vote_average","overview","genres","genre","credit","profile_path","getMovieReviews","page","reviews","review","author","content","searchMovies","query","include_adult"],"sourceRoot":""}