{"version":3,"file":"static/js/158.49359938.chunk.js","mappings":"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","sources":["components/Message.styled.js","components/MoviesList.styled.js","components/MoviesList.jsx","pages/Movies.styled.js","pages/Movies.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Message = styled.p`\n  color: #b0b4c3;\n  margin: 40px auto;\n  font-size: 24px;\n`;\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const List = styled.ul`\n  margin-top: 30px;\n  grid-template-columns: repeat(auto-fill, 300px);\n  grid-auto-rows: 520px;\n  display: grid;\n  list-style-type: none;\n  grid-column-gap: 30px;\n  grid-row-gap: 20px;\n  width: 100%;\n  justify-content: center;\n`;\n\nexport const Link = styled(NavLink)`\n  text-decoration: none;\n`;\n\nexport const ListItem = styled.li`\n  display: flex;\n  justify-content: center;\n`;\n\nexport const ImageWrapper = styled.div`\n  overflow: hidden;\n  border-radius: 10px;\n  width: 300px;\n  height: 450px;\n  background: #707793;\n`;\n\nexport const TextContainer = styled.div`\n  padding: 10px 5px;\n  > p {\n    font-size: 18px;\n    color: #b0b4c3;\n    text-transform: uppercase;\n    font-weight: 500;\n  }\n`;\n","import {\n  List,\n  ListItem,\n  TextContainer,\n  Link,\n  ImageWrapper,\n} from './MoviesList.styled';\n\nexport const MoviesList = ({ movies, from }) => {\n  return (\n    <List>\n      {movies.map(({ title, id, poster }) => (\n        <ListItem key={id}>\n          <Link to={'/movies/' + id.toString()} state={{ from: from }}>\n            <ImageWrapper>\n              <img src={poster} alt={title} />\n            </ImageWrapper>\n            <TextContainer>\n              <p>{title}</p>\n            </TextContainer>\n          </Link>\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  position: relative;\n  top: 0;\n  left: 0;\n  width: 600px;\n  height: 50px;\n`;\n\nexport const Input = styled.input`\n  box-sizing: border-box;\n  width: 100%;\n  height: 100%;\n  border: none;\n  border-radius: 30px;\n  background: #fff;\n  padding: 15px 20px;\n  font-size: 24px;\n  outline: none;\n  color: #2e3047;\n\n  &::placeholder {\n    color: #707793;\n    opacity: 1;\n  }\n`;\n\nexport const Button = styled.button`\n  font-size: 20px;\n  border: none;\n  position: absolute;\n  top: 0;\n  right: -1px;\n  height: 100%;\n  padding: 10px 26px;\n  background: #3bba9c;\n  border-radius: 30px;\n  color: #fff;\n`;\n","import { useLocation, useSearchParams } from 'react-router-dom';\nimport { searchMovies } from '../services/api';\nimport { useState, useEffect } from 'react';\nimport { MoviesList } from 'components/MoviesList';\nimport { Form, Input, Button } from './Movies.styled';\nimport { Message } from '../components/Message.styled';\n\nconst Movies = () => {\n  const location = useLocation();\n\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        setMovies(await searchMovies(query));\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    fetch();\n  }, [query]);\n\n  const search = evt => {\n    evt.preventDefault();\n    const form = evt.target;\n    const query = form.elements['search_query'].value;\n    const nextParams = query.replaceAll(' ', '') ? { query } : {};\n    setSearchParams(nextParams);\n  };\n\n  return (\n    <>\n      <Form onSubmit={search}>\n        <Input\n          name=\"search_query\"\n          type=\"text\"\n          placeholder=\"Search for a movie...\"\n        />\n        <Button type=\"submit\">Search</Button>\n      </Form>\n      {movies.length === 0 && query ? (\n        <Message>{`No result for the query \"${query}\" ;(`}</Message>\n      ) : (\n        <MoviesList\n          movies={movies}\n          from={location.pathname + location.search}\n        />\n      )}\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst api_key = 'a319e917b3467e05f7f58bcf403053f1';\n\nconst fetch = async (path, params = {}) => {\n  params.api_key = api_key;\n  params.language = 'en-US';\n  const responce = await axios.get(path, { params: params });\n  if (responce.status !== 200) {\n    throw new Error(responce.status);\n  }\n  return responce.data;\n};\n\nexport const getTrending = async () => {\n  try {\n    const responce = await fetch('trending/movie/day');\n    const movies = responce.results.map(movie => {\n      return {\n        title: movie.title,\n        id: movie.id,\n        poster:\n          'https://image.tmdb.org/t/p/w300_and_h450_bestv2/' +\n          movie.poster_path,\n      };\n    });\n    return movies;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getMovieDetails = async movieid => {\n  try {\n    const responce = await fetch(`movie/${movieid}`);\n    const movieDetails = {\n      poster:\n        'https://image.tmdb.org/t/p/w600_and_h900_bestv2/' +\n        responce.poster_path,\n      title: responce.title,\n      userScore: Math.round(responce.vote_average * 10),\n      overview: responce.overview,\n      genres: responce.genres.map(genre => genre.name),\n    };\n    return movieDetails;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getMovieCast = async movieid => {\n  try {\n    const responce = await fetch(`movie/${movieid}/credits`);\n    const cast = responce.cast.map(credit => {\n      return {\n        id: credit.id,\n        character: credit.character,\n        name: credit.name,\n        profile: credit.profile_path\n          ? `https://image.tmdb.org/t/p/w138_and_h175_face/${credit.profile_path}`\n          : 'https://www.themoviedb.org/assets/2/v4/glyphicons/basic/glyphicons-basic-4-user-grey-d8fe957375e70239d6abdd549fd7568c89281b2179b5f4470e2e12895792dfa5.svg',\n      };\n    });\n    return cast;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const getMovieReviews = async movieid => {\n  try {\n    const responce = await fetch(`movie/${movieid}/reviews`, { page: 1 });\n    const reviews = responce.results.map(review => {\n      return {\n        author: review.author,\n        content: review.content,\n        id: review.id,\n      };\n    });\n    return reviews;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const searchMovies = async query => {\n  try {\n    const responce = await fetch('search/movie', {\n      page: 1,\n      include_adult: false,\n      query: query,\n    });\n    const movies = responce.results.map(movie => {\n      return {\n        title: movie.title,\n        id: movie.id,\n        poster:\n          'https://image.tmdb.org/t/p/w300_and_h450_bestv2/' +\n          movie.poster_path,\n      };\n    });\n    return movies;\n  } catch (error) {\n    throw error;\n  }\n};\n"],"names":["Message","styled","List","Link","NavLink","ListItem","ImageWrapper","TextContainer","MoviesList","movies","from","map","title","id","poster","to","toString","state","src","alt","Form","Input","Button","location","useLocation","useState","setMovies","useSearchParams","searchParams","setSearchParams","query","get","useEffect","fetch","searchMovies","console","log","message","onSubmit","evt","preventDefault","target","elements","value","nextParams","replaceAll","name","type","placeholder","length","pathname","search","axios","api_key","path","params","language","responce","status","Error","data","getTrending","results","movie","poster_path","getMovieDetails","movieid","movieDetails","userScore","Math","round","vote_average","overview","genres","genre","getMovieCast","cast","credit","character","profile","profile_path","getMovieReviews","page","reviews","review","author","content","include_adult"],"sourceRoot":""}